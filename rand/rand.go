// package sRand/rand implements a pseudo-random string generator.
// Charakters for the resulting strings are choosen from a Charset.
// The package provides a default Charset using upper and lower case characters of the
// Latin alphabet and the digits from 0 to 9.

package rand

import (
	"fmt"
	"math/rand"
)

// A Rand is a source of random strings
type Rand struct {
	rand    *rand.Rand
	Charset string
}

// DefaultCharset is used, when Rand is generated by the New() - Function.
const DefaultCharset = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"

// Base64Url can be used with NewWithCharset().
const Base64UrlCharset = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_"

// New returns a new Rand that uses random values from src and DefaultCharset
// to generate random strings.
func New(src rand.Source) *Rand {
	return &Rand{
		rand.New(src),
		DefaultCharset,
	}
}

// NewWithCharset returns a new Rand that uses random values from src and charset
// to generate random strings. NewWithCharset Panics if len(charset) < 1!
func NewWithCharset(src rand.Source, charset string) *Rand {
	if n := len(charset); n < 1 {
		err := fmt.Errorf(
			"randstring/rand.NewWithCharset(src, charset): Invalid charsetlength %d", n)
		panic(err)
	}

	return &Rand{
		rand.New(src),
		charset,
	}
}

// Stringn returns a string of length n, where each character is choosen from Charset
func (r *Rand) Stringn(n int) string {
	chars := make([]byte, n)
	for i := 0; i < n; i++ {
		chars[i] = r.Char()
	}

	return string(chars)
}

// Char returns a pseudo-randomly choosen character of Charset
func (r *Rand) Char() byte {
	return r.Charset[r.rand.Intn(len(r.Charset))]
}

// Seed uses the provided seed value to initialize the generator to a deterministic state.
// Seed should not be called concurrently with any other Rand method.
func (r *Rand) Seed(seed int64) {
	r.rand.Seed(seed)
}

// A Source represents a source of uniformly-distributed
// pseudo-random int64 values in the range [0, 1<<63).
// - Used from math/rand package.
type Source rand.Source

// NewSource returns a new pseudo-random Source seeded with the given value.
// Unlike the default Source used by top-level functions, this source is not safe for
// concurrent use by multiple goroutines.
// - Used from math/rand package.
func NewSource(seed int64) Source {
	return rand.NewSource(seed)
}
